#ifndef REPRESENTATIONS_HPP
#define REPRESENTATIONS_HPP

#include <array>

namespace GF256
{
inline constexpr std::array<unsigned char, 256> add_to_mult_rep =
{
  255/*invalid*/,
  0,
  1,
  157,
  2,
  59,
  158,
  151,
  3,
  53,
  60,
  132,
  159,
  70,
  152,
  216,
  4,
  118,
  54,
  38,
  61,
  47,
  133,
  227,
  160,
  181,
  71,
  210,
  153,
  34,
  217,
  16,
  5,
  173,
  119,
  221,
  55,
  43,
  39,
  191,
  62,
  88,
  48,
  83,
  134,
  112,
  228,
  247,
  161,
  28,
  182,
  20,
  72,
  195,
  211,
  242,
  154,
  129,
  35,
  207,
  218,
  80,
  17,
  204,
  6,
  106,
  174,
  164,
  120,
  9,
  222,
  237,
  56,
  67,
  44,
  31,
  40,
  109,
  192,
  77,
  63,
  140,
  89,
  185,
  49,
  177,
  84,
  125,
  135,
  144,
  113,
  23,
  229,
  167,
  248,
  97,
  162,
  235,
  29,
  75,
  183,
  123,
  21,
  95,
  73,
  93,
  196,
  198,
  212,
  12,
  243,
  200,
  155,
  149,
  130,
  214,
  36,
  225,
  208,
  14,
  219,
  189,
  81,
  245,
  18,
  240,
  205,
  202,
  7,
  104,
  107,
  65,
  175,
  138,
  165,
  142,
  121,
  233,
  10,
  91,
  223,
  147,
  238,
  187,
  57,
  253,
  68,
  51,
  45,
  116,
  32,
  179,
  41,
  171,
  110,
  86,
  193,
  26,
  78,
  127,
  64,
  103,
  141,
  137,
  90,
  232,
  186,
  146,
  50,
  252,
  178,
  115,
  85,
  170,
  126,
  25,
  136,
  102,
  145,
  231,
  114,
  251,
  24,
  169,
  230,
  101,
  168,
  250,
  249,
  100,
  98,
  99,
  163,
  105,
  236,
  8,
  30,
  66,
  76,
  108,
  184,
  139,
  124,
  176,
  22,
  143,
  96,
  166,
  74,
  234,
  94,
  122,
  197,
  92,
  199,
  11,
  213,
  148,
  13,
  224,
  244,
  188,
  201,
  239,
  156,
  254,
  150,
  58,
  131,
  52,
  215,
  69,
  37,
  117,
  226,
  46,
  209,
  180,
  15,
  33,
  220,
  172,
  190,
  42,
  82,
  87,
  246,
  111,
  19,
  27,
  241,
  194,
  206,
  128,
  203,
  79,
};

inline constexpr std::array<unsigned char, 256> mult_to_add_rep = {
  0b00000001,
  0b00000010,
  0b00000100,
  0b00001000,
  0b00010000,
  0b00100000,
  0b01000000,
  0b10000000,
  0b11000011,
  0b01000101,
  0b10001010,
  0b11010111,
  0b01101101,
  0b11011010,
  0b01110111,
  0b11101110,
  0b00011111,
  0b00111110,
  0b01111100,
  0b11111000,
  0b00110011,
  0b01100110,
  0b11001100,
  0b01011011,
  0b10110110,
  0b10101111,
  0b10011101,
  0b11111001,
  0b00110001,
  0b01100010,
  0b11000100,
  0b01001011,
  0b10010110,
  0b11101111,
  0b00011101,
  0b00111010,
  0b01110100,
  0b11101000,
  0b00010011,
  0b00100110,
  0b01001100,
  0b10011000,
  0b11110011,
  0b00100101,
  0b01001010,
  0b10010100,
  0b11101011,
  0b00010101,
  0b00101010,
  0b01010100,
  0b10101000,
  0b10010011,
  0b11100101,
  0b00001001,
  0b00010010,
  0b00100100,
  0b01001000,
  0b10010000,
  0b11100011,
  0b00000101,
  0b00001010,
  0b00010100,
  0b00101000,
  0b01010000,
  0b10100000,
  0b10000011,
  0b11000101,
  0b01001001,
  0b10010010,
  0b11100111,
  0b00001101,
  0b00011010,
  0b00110100,
  0b01101000,
  0b11010000,
  0b01100011,
  0b11000110,
  0b01001111,
  0b10011110,
  0b11111111,
  0b00111101,
  0b01111010,
  0b11110100,
  0b00101011,
  0b01010110,
  0b10101100,
  0b10011011,
  0b11110101,
  0b00101001,
  0b01010010,
  0b10100100,
  0b10001011,
  0b11010101,
  0b01101001,
  0b11010010,
  0b01100111,
  0b11001110,
  0b01011111,
  0b10111110,
  0b10111111,
  0b10111101,
  0b10111001,
  0b10110001,
  0b10100001,
  0b10000001,
  0b11000001,
  0b01000001,
  0b10000010,
  0b11000111,
  0b01001101,
  0b10011010,
  0b11110111,
  0b00101101,
  0b01011010,
  0b10110100,
  0b10101011,
  0b10010101,
  0b11101001,
  0b00010001,
  0b00100010,
  0b01000100,
  0b10001000,
  0b11010011,
  0b01100101,
  0b11001010,
  0b01010111,
  0b10101110,
  0b10011111,
  0b11111101,
  0b00111001,
  0b01110010,
  0b11100100,
  0b00001011,
  0b00010110,
  0b00101100,
  0b01011000,
  0b10110000,
  0b10100011,
  0b10000101,
  0b11001001,
  0b01010001,
  0b10100010,
  0b10000111,
  0b11001101,
  0b01011001,
  0b10110010,
  0b10100111,
  0b10001101,
  0b11011001,
  0b01110001,
  0b11100010,
  0b00000111,
  0b00001110,
  0b00011100,
  0b00111000,
  0b01110000,
  0b11100000,
  0b00000011,
  0b00000110,
  0b00001100,
  0b00011000,
  0b00110000,
  0b01100000,
  0b11000000,
  0b01000011,
  0b10000110,
  0b11001111,
  0b01011101,
  0b10111010,
  0b10110111,
  0b10101101,
  0b10011001,
  0b11110001,
  0b00100001,
  0b01000010,
  0b10000100,
  0b11001011,
  0b01010101,
  0b10101010,
  0b10010111,
  0b11101101,
  0b00011001,
  0b00110010,
  0b01100100,
  0b11001000,
  0b01010011,
  0b10100110,
  0b10001111,
  0b11011101,
  0b01111001,
  0b11110010,
  0b00100111,
  0b01001110,
  0b10011100,
  0b11111011,
  0b00110101,
  0b01101010,
  0b11010100,
  0b01101011,
  0b11010110,
  0b01101111,
  0b11011110,
  0b01111111,
  0b11111110,
  0b00111111,
  0b01111110,
  0b11111100,
  0b00111011,
  0b01110110,
  0b11101100,
  0b00011011,
  0b00110110,
  0b01101100,
  0b11011000,
  0b01110011,
  0b11100110,
  0b00001111,
  0b00011110,
  0b00111100,
  0b01111000,
  0b11110000,
  0b00100011,
  0b01000110,
  0b10001100,
  0b11011011,
  0b01110101,
  0b11101010,
  0b00010111,
  0b00101110,
  0b01011100,
  0b10111000,
  0b10110011,
  0b10100101,
  0b10001001,
  0b11010001,
  0b01100001,
  0b11000010,
  0b01000111,
  0b10001110,
  0b11011111,
  0b01111101,
  0b11111010,
  0b00110111,
  0b01101110,
  0b11011100,
  0b01111011,
  0b11110110,
  0b00101111,
  0b01011110,
  0b10111100,
  0b10111011,
  0b10110101,
  0b10101001,
  0b10010001,
  0b11100001,
  0b00000000 /*invalid*/
};
}

#endif // REPRESENTATIONS_HPP
